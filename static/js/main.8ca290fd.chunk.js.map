{"version":3,"sources":["Components/Courses.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","color","palette","text","secondary","Courses","courses","classes","React","useState","expanded","setExpanded","className","Grid","item","xs","formLabel","Typography","variant","map","course","ExpansionPanel","CLASS","onChange","panel","event","isExpanded","ExpansionPanelSummary","expandIcon","aria-controls","id","TITLE","ExpansionPanelDetails","PROGRAM","QUARTER","INSTRUCTOR","WEEKS","App","setCourses","console","log","useEffect","fetch","then","response","json","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uVASMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,MAAO,QAETC,QAAS,CACPC,SAAUJ,EAAMK,WAAWC,QAAQ,IACnCC,UAAW,SACXC,WAAY,GAEdC,iBAAkB,CAChBL,SAAUJ,EAAMK,WAAWC,QAAQ,IACnCI,MAAOV,EAAMW,QAAQC,KAAKC,eAIjBC,EAAU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClBC,EAAUlB,IADsB,EAENmB,IAAMC,UAAS,GAFT,mBAE/BC,EAF+B,KAErBC,EAFqB,KAQtC,OACE,yBAAKC,UAAWL,EAAQf,MACxB,kBAACqB,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIH,UAAWL,EAAQS,WAClC,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,oBAEDZ,EAAQa,KAAI,SAAAC,GAAM,OAEnB,kBAACC,EAAA,EAAD,CAAgBX,SAAUA,IAAaU,EAAOE,MAAOC,UAXpCC,EAW2DJ,EAAOE,MAXzD,SAACG,EAAOC,GACpCf,IAAYe,GAAaF,MAWvB,kBAACG,EAAA,EAAD,CACEC,WAAY,kBAAC,IAAD,MACZC,gBAAc,mBACdC,GAAG,mBAEH,kBAACb,EAAA,EAAD,CAAYL,UAAWL,EAAQb,SAAU0B,EAAOE,OAClD,kBAACL,EAAA,EAAD,CAAYL,UAAWL,EAAQP,kBAAmBoB,EAAOW,QAEzD,kBAACC,EAAA,EAAD,KACE,kBAACf,EAAA,EAAD,CAAYL,UAAWL,EAAQb,SAC5B0B,EAAOa,SAEV,kBAAChB,EAAA,EAAD,CAAYL,UAAWL,EAAQb,SAAU0B,EAAOc,SAChD,kBAACjB,EAAA,EAAD,CAAYL,UAAWL,EAAQb,SAAU0B,EAAOe,YAChD,kBAAClB,EAAA,EAAD,CAAYL,UAAWL,EAAQb,SAAU0B,EAAOgB,SA1BjC,IAAAZ,OCNRa,MAjBf,WAAgB,IAAD,EACiB5B,mBAAS,IAD1B,mBACNH,EADM,KACGgC,EADH,KAUb,OARAC,QAAQC,IAAI,MACZC,qBAAU,WACRC,MAAM,6BAA6BC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,OAAOF,MACpE,SAAAG,GACAP,QAAQC,IAAI,UAAUM,GACtBR,EAAWQ,WAEV,IAED,yBAAKlC,UAAU,OACX,kBAAC,EAAD,CAASN,QAAWA,MCLRyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.8ca290fd.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport const Courses = ({ courses }) => {\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n  const handleChange = panel => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : false);\n  };\n\n  return (\n    <div className={classes.root}>\n    <Grid item xs={12} className={classes.formLabel}>\n        <Typography variant=\"h2\">MSIS Coursework</Typography>\n      </Grid>\n      {courses.map(course => (\n\n      <ExpansionPanel expanded={expanded === course.CLASS} onChange={handleChange(course.CLASS)}>\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"panel1bh-content\"\n        id=\"panel1bh-header\"\n      >\n        <Typography className={classes.heading}>{course.CLASS}</Typography>\n      <Typography className={classes.secondaryHeading}>{course.TITLE}</Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails>\n        <Typography className={classes.heading}>\n          {course.PROGRAM}\n        </Typography>\n        <Typography className={classes.heading}>{course.QUARTER}</Typography>\n        <Typography className={classes.heading}>{course.INSTRUCTOR}</Typography>\n        <Typography className={classes.heading}>{course.WEEKS}</Typography>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n      ))}\n\n    </div>\n  );\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nimport {Courses} from \"./Components/Courses\"\n\nfunction App() {\n  const [courses, setCourses] = useState([])\n  console.log(\"Hi\")\n  useEffect(() =>{\n    fetch('http://127.0.0.1:5000/csv').then(response => response.json().then(\n    data => {\n    console.log(\"data is\",data)\n    setCourses(data)}\n    ))\n  }, [])\n  return (\n    <div className=\"App\">\n        <Courses courses = {courses} />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}