{"version":3,"sources":["Components/Courses.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","flexGrow","backgroundColor","palette","background","paper","padding","spacing","textAlign","color","info","main","action","hover","formLabel","cyan","A200","Courses","courses","classes","handleCourseClick","course","event","console","log","TITLE","className","Grid","container","item","xs","Typography","variant","map","Paper","Button","onClick","CLASS","App","useState","setCourses","useEffect","fetch","then","response","json","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+UAWMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,MAAO,OACPC,SAAU,EACVC,gBAAiBJ,EAAMK,QAAQC,WAAWC,OAE5CA,MAAO,CACLC,QAASR,EAAMS,QAAQ,GACvBC,UAAW,SACXC,MAAOX,EAAMK,QAAQO,KAAKC,KAC1BT,gBAAiBJ,EAAMK,QAAQS,OAAOC,OAExCC,UAAU,CACNZ,gBAAiBa,IAAKC,KACtBV,QAASR,EAAMS,QAAQ,GACvBC,UAAW,cAIJS,EAAU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAChBC,EAAUvB,IAEVwB,EAAoB,SAAAC,GAAM,OAAI,SAAAC,GAChCC,QAAQC,IAAI,UAAWH,EAAOI,SAGlC,OACC,yBAAKC,UAAWP,EAAQpB,MACvB,kBAAC4B,EAAA,EAAD,CAAMC,WAAS,EAACrB,QAAS,GAC1B,kBAACoB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIJ,UAAWP,EAAQL,WACnC,kBAACiB,EAAA,EAAD,CAAYC,QAAQ,MAApB,oBAEDd,EAAQe,KAAI,SAAAZ,GAAM,OACjB,kBAACM,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACI,EAAA,EAAD,CAAOR,UAAWP,EAAQd,OACxB,kBAACsB,EAAA,EAAD,CAAMC,WAAS,EAACrB,QAAS,GACrB,kBAACoB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACK,EAAA,EAAD,CAAQC,QAAShB,EAAkBC,IAAUA,EAAOgB,QAExD,kBAACV,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIT,EAAOI,gBC5B3Ba,MAjBf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNrB,EADM,KACGsB,EADH,KAUb,OARAjB,QAAQC,IAAI,MACZiB,qBAAU,WACRC,MAAM,QAAQC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,OAAOF,MAC/C,SAAAG,GACAvB,QAAQC,IAAI,UAAUsB,GACtBN,EAAWM,WAEV,IAED,yBAAKpB,UAAU,OACX,kBAAC,EAAD,CAASR,QAAWA,MCLR6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.df531d90.chunk.js","sourcesContent":["import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Typography from '@material-ui/core/Typography';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport cyan from '@material-ui/core/colors/cyan';\nimport Button from '@material-ui/core/Button'\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.info.main,\n    backgroundColor: theme.palette.action.hover\n  },\n  formLabel:{\n      backgroundColor: cyan.A200,\n      padding: theme.spacing(2),\n      textAlign: 'center',\n  }\n}));\n\nexport const Courses = ({ courses }) => {\n    const classes = useStyles();\n\n    const handleCourseClick = course => event => {\n        console.log(\"clicked\", course.TITLE)\n    }\n\n    return (\n     <div className={classes.root}>\n      <Grid container spacing={3}>\n     <Grid item xs={12} className={classes.formLabel}>\n        <Typography variant=\"h2\">MSIS Coursework</Typography>\n      </Grid>\n      {courses.map(course => (\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <Grid container spacing={2}>\n                <Grid item xs={4}>\n                    <Button onClick={handleCourseClick(course)}>{course.CLASS}</Button>\n                </Grid>\n                <Grid item xs={4}>{course.TITLE}</Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n      ))}\n      </Grid>\n      </div>\n\n    )\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nimport {Courses} from \"./Components/Courses\"\n\nfunction App() {\n  const [courses, setCourses] = useState([])\n  console.log(\"Hi\")\n  useEffect(() =>{\n    fetch('/csv').then(response => response.json().then(\n    data => {\n    console.log(\"data is\",data)\n    setCourses(data)}\n    ))\n  }, [])\n  return (\n    <div className=\"App\">\n        <Courses courses = {courses} />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}